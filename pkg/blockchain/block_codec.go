// Code generated by github.com/LiskHQ/lisk-engine/pkg/codec/gen; DO NOT EDIT.

package blockchain

import (
	"github.com/LiskHQ/lisk-engine/pkg/codec"
)

func (e *RawBlock) Encode() []byte {
	writer := codec.NewWriter()
	writer.WriteBytes(1, e.Header)
	writer.WriteBytesArray(2, e.Transactions)
	writer.WriteBytesArray(3, e.Assets)
	return writer.Result()
}

func (e *RawBlock) Decode(data []byte) error {
	reader := codec.NewReader(data)
	return e.DecodeFromReader(reader)
}

func (e *RawBlock) MustDecode(data []byte) {
	if err := e.Decode(data); err != nil {
		panic(err)
	}
}

func (e *RawBlock) DecodeStrict(data []byte) error {
	reader := codec.NewReader(data)
	if err := e.DecodeStrictFromReader(reader); err != nil {
		return err
	}
	if reader.HasUnreadBytes() {
		return codec.ErrUnreadBytes
	}
	return nil
}

func (e *RawBlock) DecodeFromReader(reader *codec.Reader) error {
	{
		val, err := reader.ReadBytes(1, false)
		if err != nil {
			return err
		}
		e.Header = val
	}
	{
		val, err := reader.ReadBytesArray(2)
		if err != nil {
			return err
		}
		e.Transactions = val
	}
	{
		val, err := reader.ReadBytesArray(3)
		if err != nil {
			return err
		}
		e.Assets = val
	}
	return nil
}

func (e *RawBlock) DecodeStrictFromReader(reader *codec.Reader) error {
	{
		val, err := reader.ReadBytes(1, true)
		if err != nil {
			return err
		}
		e.Header = val
	}
	{
		val, err := reader.ReadBytesArray(2)
		if err != nil {
			return err
		}
		e.Transactions = val
	}
	{
		val, err := reader.ReadBytesArray(3)
		if err != nil {
			return err
		}
		e.Assets = val
	}
	return nil
}

func (e *Block) Encode() []byte {
	writer := codec.NewWriter()
	if e.Header != nil {
		writer.WriteEncodable(1, e.Header)
	}
	{
		for _, val := range e.Transactions {
			if val != nil {
				writer.WriteEncodable(2, val)
			}
		}
	}
	{
		for _, val := range e.Assets {
			if val != nil {
				writer.WriteEncodable(3, val)
			}
		}
	}
	return writer.Result()
}

func (e *Block) Decode(data []byte) error {
	reader := codec.NewReader(data)
	return e.DecodeFromReader(reader)
}

func (e *Block) MustDecode(data []byte) {
	if err := e.Decode(data); err != nil {
		panic(err)
	}
}

func (e *Block) DecodeStrict(data []byte) error {
	reader := codec.NewReader(data)
	if err := e.DecodeStrictFromReader(reader); err != nil {
		return err
	}
	if reader.HasUnreadBytes() {
		return codec.ErrUnreadBytes
	}
	return nil
}

func (e *Block) DecodeFromReader(reader *codec.Reader) error {
	{
		val, err := reader.ReadDecodable(1, func() codec.DecodableReader { return new(BlockHeader) }, false)
		if err != nil {
			return err
		}
		e.Header = val.(*BlockHeader)
	}
	{
		vals, err := reader.ReadDecodables(2, func() codec.DecodableReader { return new(Transaction) })
		if err != nil {
			return err
		}
		r := make([]*Transaction, len(vals))
		for i, v := range vals {
			r[i] = v.(*Transaction)
		}
		e.Transactions = r
	}
	{
		vals, err := reader.ReadDecodables(3, func() codec.DecodableReader { return new(BlockAsset) })
		if err != nil {
			return err
		}
		r := make([]*BlockAsset, len(vals))
		for i, v := range vals {
			r[i] = v.(*BlockAsset)
		}
		e.Assets = r
	}
	return nil
}

func (e *Block) DecodeStrictFromReader(reader *codec.Reader) error {
	{
		val, err := reader.ReadDecodable(1, func() codec.DecodableReader { return new(BlockHeader) }, true)
		if err != nil {
			return err
		}
		e.Header = val.(*BlockHeader)
	}
	{
		vals, err := reader.ReadDecodables(2, func() codec.DecodableReader { return new(Transaction) })
		if err != nil {
			return err
		}
		r := make([]*Transaction, len(vals))
		for i, v := range vals {
			r[i] = v.(*Transaction)
		}
		e.Transactions = r
	}
	{
		vals, err := reader.ReadDecodables(3, func() codec.DecodableReader { return new(BlockAsset) })
		if err != nil {
			return err
		}
		r := make([]*BlockAsset, len(vals))
		for i, v := range vals {
			r[i] = v.(*BlockAsset)
		}
		e.Assets = r
	}
	return nil
}

func (e *BlockHeader) Encode() []byte {
	writer := codec.NewWriter()
	writer.WriteUInt32(1, e.Version)
	writer.WriteUInt32(2, e.Timestamp)
	writer.WriteUInt32(3, e.Height)
	writer.WriteBytes(4, e.PreviousBlockID)
	writer.WriteBytes(5, e.GeneratorAddress)
	writer.WriteBytes(6, e.TransactionRoot)
	writer.WriteBytes(7, e.AssetRoot)
	writer.WriteBytes(8, e.EventRoot)
	writer.WriteBytes(9, e.StateRoot)
	writer.WriteUInt32(10, e.MaxHeightPrevoted)
	writer.WriteUInt32(11, e.MaxHeightGenerated)
	writer.WriteBool(12, e.ImpliesMaxPrevotes)
	writer.WriteBytes(13, e.ValidatorsHash)
	if e.AggregateCommit != nil {
		writer.WriteEncodable(14, e.AggregateCommit)
	}
	writer.WriteBytes(15, e.Signature)
	return writer.Result()
}

func (e *BlockHeader) Decode(data []byte) error {
	reader := codec.NewReader(data)
	return e.DecodeFromReader(reader)
}

func (e *BlockHeader) MustDecode(data []byte) {
	if err := e.Decode(data); err != nil {
		panic(err)
	}
}

func (e *BlockHeader) DecodeStrict(data []byte) error {
	reader := codec.NewReader(data)
	if err := e.DecodeStrictFromReader(reader); err != nil {
		return err
	}
	if reader.HasUnreadBytes() {
		return codec.ErrUnreadBytes
	}
	return nil
}

func (e *BlockHeader) DecodeFromReader(reader *codec.Reader) error {
	{
		val, err := reader.ReadUInt32(1, false)
		if err != nil {
			return err
		}
		e.Version = val
	}
	{
		val, err := reader.ReadUInt32(2, false)
		if err != nil {
			return err
		}
		e.Timestamp = val
	}
	{
		val, err := reader.ReadUInt32(3, false)
		if err != nil {
			return err
		}
		e.Height = val
	}
	{
		val, err := reader.ReadBytes(4, false)
		if err != nil {
			return err
		}
		e.PreviousBlockID = val
	}
	{
		val, err := reader.ReadBytes(5, false)
		if err != nil {
			return err
		}
		e.GeneratorAddress = val
	}
	{
		val, err := reader.ReadBytes(6, false)
		if err != nil {
			return err
		}
		e.TransactionRoot = val
	}
	{
		val, err := reader.ReadBytes(7, false)
		if err != nil {
			return err
		}
		e.AssetRoot = val
	}
	{
		val, err := reader.ReadBytes(8, false)
		if err != nil {
			return err
		}
		e.EventRoot = val
	}
	{
		val, err := reader.ReadBytes(9, false)
		if err != nil {
			return err
		}
		e.StateRoot = val
	}
	{
		val, err := reader.ReadUInt32(10, false)
		if err != nil {
			return err
		}
		e.MaxHeightPrevoted = val
	}
	{
		val, err := reader.ReadUInt32(11, false)
		if err != nil {
			return err
		}
		e.MaxHeightGenerated = val
	}
	{
		val, err := reader.ReadBool(12, false)
		if err != nil {
			return err
		}
		e.ImpliesMaxPrevotes = val
	}
	{
		val, err := reader.ReadBytes(13, false)
		if err != nil {
			return err
		}
		e.ValidatorsHash = val
	}
	{
		val, err := reader.ReadDecodable(14, func() codec.DecodableReader { return new(AggregateCommit) }, false)
		if err != nil {
			return err
		}
		e.AggregateCommit = val.(*AggregateCommit)
	}
	{
		val, err := reader.ReadBytes(15, false)
		if err != nil {
			return err
		}
		e.Signature = val
	}
	return nil
}

func (e *BlockHeader) DecodeStrictFromReader(reader *codec.Reader) error {
	{
		val, err := reader.ReadUInt32(1, true)
		if err != nil {
			return err
		}
		e.Version = val
	}
	{
		val, err := reader.ReadUInt32(2, true)
		if err != nil {
			return err
		}
		e.Timestamp = val
	}
	{
		val, err := reader.ReadUInt32(3, true)
		if err != nil {
			return err
		}
		e.Height = val
	}
	{
		val, err := reader.ReadBytes(4, true)
		if err != nil {
			return err
		}
		e.PreviousBlockID = val
	}
	{
		val, err := reader.ReadBytes(5, true)
		if err != nil {
			return err
		}
		e.GeneratorAddress = val
	}
	{
		val, err := reader.ReadBytes(6, true)
		if err != nil {
			return err
		}
		e.TransactionRoot = val
	}
	{
		val, err := reader.ReadBytes(7, true)
		if err != nil {
			return err
		}
		e.AssetRoot = val
	}
	{
		val, err := reader.ReadBytes(8, true)
		if err != nil {
			return err
		}
		e.EventRoot = val
	}
	{
		val, err := reader.ReadBytes(9, true)
		if err != nil {
			return err
		}
		e.StateRoot = val
	}
	{
		val, err := reader.ReadUInt32(10, true)
		if err != nil {
			return err
		}
		e.MaxHeightPrevoted = val
	}
	{
		val, err := reader.ReadUInt32(11, true)
		if err != nil {
			return err
		}
		e.MaxHeightGenerated = val
	}
	{
		val, err := reader.ReadBool(12, true)
		if err != nil {
			return err
		}
		e.ImpliesMaxPrevotes = val
	}
	{
		val, err := reader.ReadBytes(13, true)
		if err != nil {
			return err
		}
		e.ValidatorsHash = val
	}
	{
		val, err := reader.ReadDecodable(14, func() codec.DecodableReader { return new(AggregateCommit) }, true)
		if err != nil {
			return err
		}
		e.AggregateCommit = val.(*AggregateCommit)
	}
	{
		val, err := reader.ReadBytes(15, true)
		if err != nil {
			return err
		}
		e.Signature = val
	}
	return nil
}

func (e *AggregateCommit) Encode() []byte {
	writer := codec.NewWriter()
	writer.WriteUInt32(1, e.Height)
	writer.WriteBytes(2, e.AggregationBits)
	writer.WriteBytes(3, e.CertificateSignature)
	return writer.Result()
}

func (e *AggregateCommit) Decode(data []byte) error {
	reader := codec.NewReader(data)
	return e.DecodeFromReader(reader)
}

func (e *AggregateCommit) MustDecode(data []byte) {
	if err := e.Decode(data); err != nil {
		panic(err)
	}
}

func (e *AggregateCommit) DecodeStrict(data []byte) error {
	reader := codec.NewReader(data)
	if err := e.DecodeStrictFromReader(reader); err != nil {
		return err
	}
	if reader.HasUnreadBytes() {
		return codec.ErrUnreadBytes
	}
	return nil
}

func (e *AggregateCommit) DecodeFromReader(reader *codec.Reader) error {
	{
		val, err := reader.ReadUInt32(1, false)
		if err != nil {
			return err
		}
		e.Height = val
	}
	{
		val, err := reader.ReadBytes(2, false)
		if err != nil {
			return err
		}
		e.AggregationBits = val
	}
	{
		val, err := reader.ReadBytes(3, false)
		if err != nil {
			return err
		}
		e.CertificateSignature = val
	}
	return nil
}

func (e *AggregateCommit) DecodeStrictFromReader(reader *codec.Reader) error {
	{
		val, err := reader.ReadUInt32(1, true)
		if err != nil {
			return err
		}
		e.Height = val
	}
	{
		val, err := reader.ReadBytes(2, true)
		if err != nil {
			return err
		}
		e.AggregationBits = val
	}
	{
		val, err := reader.ReadBytes(3, true)
		if err != nil {
			return err
		}
		e.CertificateSignature = val
	}
	return nil
}

func (e *signingBlockHeader) Encode() []byte {
	writer := codec.NewWriter()
	writer.WriteUInt32(1, e.Version)
	writer.WriteUInt32(2, e.Timestamp)
	writer.WriteUInt32(3, e.Height)
	writer.WriteBytes(4, e.PreviousBlockID)
	writer.WriteBytes(5, e.GeneratorAddress)
	writer.WriteBytes(6, e.TransactionRoot)
	writer.WriteBytes(7, e.AssetRoot)
	writer.WriteBytes(8, e.EventRoot)
	writer.WriteBytes(9, e.StateRoot)
	writer.WriteUInt32(10, e.MaxHeightPrevoted)
	writer.WriteUInt32(11, e.MaxHeightGenerated)
	writer.WriteBool(12, e.ImpliesMaxPrevotes)
	writer.WriteBytes(13, e.ValidatorsHash)
	if e.AggregateCommit != nil {
		writer.WriteEncodable(14, e.AggregateCommit)
	}
	return writer.Result()
}

func (e *signingBlockHeader) Decode(data []byte) error {
	reader := codec.NewReader(data)
	return e.DecodeFromReader(reader)
}

func (e *signingBlockHeader) MustDecode(data []byte) {
	if err := e.Decode(data); err != nil {
		panic(err)
	}
}

func (e *signingBlockHeader) DecodeStrict(data []byte) error {
	reader := codec.NewReader(data)
	if err := e.DecodeStrictFromReader(reader); err != nil {
		return err
	}
	if reader.HasUnreadBytes() {
		return codec.ErrUnreadBytes
	}
	return nil
}

func (e *signingBlockHeader) DecodeFromReader(reader *codec.Reader) error {
	{
		val, err := reader.ReadUInt32(1, false)
		if err != nil {
			return err
		}
		e.Version = val
	}
	{
		val, err := reader.ReadUInt32(2, false)
		if err != nil {
			return err
		}
		e.Timestamp = val
	}
	{
		val, err := reader.ReadUInt32(3, false)
		if err != nil {
			return err
		}
		e.Height = val
	}
	{
		val, err := reader.ReadBytes(4, false)
		if err != nil {
			return err
		}
		e.PreviousBlockID = val
	}
	{
		val, err := reader.ReadBytes(5, false)
		if err != nil {
			return err
		}
		e.GeneratorAddress = val
	}
	{
		val, err := reader.ReadBytes(6, false)
		if err != nil {
			return err
		}
		e.TransactionRoot = val
	}
	{
		val, err := reader.ReadBytes(7, false)
		if err != nil {
			return err
		}
		e.AssetRoot = val
	}
	{
		val, err := reader.ReadBytes(8, false)
		if err != nil {
			return err
		}
		e.EventRoot = val
	}
	{
		val, err := reader.ReadBytes(9, false)
		if err != nil {
			return err
		}
		e.StateRoot = val
	}
	{
		val, err := reader.ReadUInt32(10, false)
		if err != nil {
			return err
		}
		e.MaxHeightPrevoted = val
	}
	{
		val, err := reader.ReadUInt32(11, false)
		if err != nil {
			return err
		}
		e.MaxHeightGenerated = val
	}
	{
		val, err := reader.ReadBool(12, false)
		if err != nil {
			return err
		}
		e.ImpliesMaxPrevotes = val
	}
	{
		val, err := reader.ReadBytes(13, false)
		if err != nil {
			return err
		}
		e.ValidatorsHash = val
	}
	{
		val, err := reader.ReadDecodable(14, func() codec.DecodableReader { return new(AggregateCommit) }, false)
		if err != nil {
			return err
		}
		e.AggregateCommit = val.(*AggregateCommit)
	}
	return nil
}

func (e *signingBlockHeader) DecodeStrictFromReader(reader *codec.Reader) error {
	{
		val, err := reader.ReadUInt32(1, true)
		if err != nil {
			return err
		}
		e.Version = val
	}
	{
		val, err := reader.ReadUInt32(2, true)
		if err != nil {
			return err
		}
		e.Timestamp = val
	}
	{
		val, err := reader.ReadUInt32(3, true)
		if err != nil {
			return err
		}
		e.Height = val
	}
	{
		val, err := reader.ReadBytes(4, true)
		if err != nil {
			return err
		}
		e.PreviousBlockID = val
	}
	{
		val, err := reader.ReadBytes(5, true)
		if err != nil {
			return err
		}
		e.GeneratorAddress = val
	}
	{
		val, err := reader.ReadBytes(6, true)
		if err != nil {
			return err
		}
		e.TransactionRoot = val
	}
	{
		val, err := reader.ReadBytes(7, true)
		if err != nil {
			return err
		}
		e.AssetRoot = val
	}
	{
		val, err := reader.ReadBytes(8, true)
		if err != nil {
			return err
		}
		e.EventRoot = val
	}
	{
		val, err := reader.ReadBytes(9, true)
		if err != nil {
			return err
		}
		e.StateRoot = val
	}
	{
		val, err := reader.ReadUInt32(10, true)
		if err != nil {
			return err
		}
		e.MaxHeightPrevoted = val
	}
	{
		val, err := reader.ReadUInt32(11, true)
		if err != nil {
			return err
		}
		e.MaxHeightGenerated = val
	}
	{
		val, err := reader.ReadBool(12, true)
		if err != nil {
			return err
		}
		e.ImpliesMaxPrevotes = val
	}
	{
		val, err := reader.ReadBytes(13, true)
		if err != nil {
			return err
		}
		e.ValidatorsHash = val
	}
	{
		val, err := reader.ReadDecodable(14, func() codec.DecodableReader { return new(AggregateCommit) }, true)
		if err != nil {
			return err
		}
		e.AggregateCommit = val.(*AggregateCommit)
	}
	return nil
}

func (e *BlockAsset) Encode() []byte {
	writer := codec.NewWriter()
	writer.WriteString(1, e.Module)
	writer.WriteBytes(2, e.Data)
	return writer.Result()
}

func (e *BlockAsset) Decode(data []byte) error {
	reader := codec.NewReader(data)
	return e.DecodeFromReader(reader)
}

func (e *BlockAsset) MustDecode(data []byte) {
	if err := e.Decode(data); err != nil {
		panic(err)
	}
}

func (e *BlockAsset) DecodeStrict(data []byte) error {
	reader := codec.NewReader(data)
	if err := e.DecodeStrictFromReader(reader); err != nil {
		return err
	}
	if reader.HasUnreadBytes() {
		return codec.ErrUnreadBytes
	}
	return nil
}

func (e *BlockAsset) DecodeFromReader(reader *codec.Reader) error {
	{
		val, err := reader.ReadString(1, false)
		if err != nil {
			return err
		}
		e.Module = val
	}
	{
		val, err := reader.ReadBytes(2, false)
		if err != nil {
			return err
		}
		e.Data = val
	}
	return nil
}

func (e *BlockAsset) DecodeStrictFromReader(reader *codec.Reader) error {
	{
		val, err := reader.ReadString(1, true)
		if err != nil {
			return err
		}
		e.Module = val
	}
	{
		val, err := reader.ReadBytes(2, true)
		if err != nil {
			return err
		}
		e.Data = val
	}
	return nil
}
