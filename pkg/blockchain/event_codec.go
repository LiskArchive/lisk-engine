// Code generated by github.com/LiskHQ/lisk-engine/pkg/codec/gen; DO NOT EDIT.

package blockchain

import (
	"github.com/LiskHQ/lisk-engine/pkg/codec"
)

func (e *StandardTransactionEvent) Encode() ([]byte, error) {
	writer := codec.NewWriter()
	if err := writer.WriteBool(1, e.Success); err != nil {
		return nil, err
	}
	return writer.Result(), nil
}

func (e *StandardTransactionEvent) MustEncode() []byte {
	encoded, err := e.Encode()
	if err != nil {
		panic(err)
	}
	return encoded
}

func (e *StandardTransactionEvent) Decode(data []byte) error {
	reader := codec.NewReader(data)
	return e.DecodeFromReader(reader)
}

func (e *StandardTransactionEvent) MustDecode(data []byte) {
	if err := e.Decode(data); err != nil {
		panic(err)
	}
}

func (e *StandardTransactionEvent) DecodeStrict(data []byte) error {
	reader := codec.NewReader(data)
	if err := e.DecodeStrictFromReader(reader); err != nil {
		return err
	}
	if reader.HasUnreadBytes() {
		return codec.ErrUnreadBytes
	}
	return nil
}

func (e *StandardTransactionEvent) DecodeFromReader(reader *codec.Reader) error {
	{
		val, err := reader.ReadBool(1, false)
		if err != nil {
			return err
		}
		e.Success = val
	}
	return nil
}

func (e *StandardTransactionEvent) DecodeStrictFromReader(reader *codec.Reader) error {
	{
		val, err := reader.ReadBool(1, true)
		if err != nil {
			return err
		}
		e.Success = val
	}
	return nil
}

func (e *Event) Encode() ([]byte, error) {
	writer := codec.NewWriter()
	if err := writer.WriteString(1, e.Module); err != nil {
		return nil, err
	}
	if err := writer.WriteString(2, e.Name); err != nil {
		return nil, err
	}
	if err := writer.WriteBytes(3, e.Data); err != nil {
		return nil, err
	}
	if err := writer.WriteBytesArray(4, codec.HexArrayToBytesArray(e.Topics)); err != nil {
		return nil, err
	}
	if err := writer.WriteUInt32(5, e.Height); err != nil {
		return nil, err
	}
	if err := writer.WriteUInt32(6, e.Index); err != nil {
		return nil, err
	}
	return writer.Result(), nil
}

func (e *Event) MustEncode() []byte {
	encoded, err := e.Encode()
	if err != nil {
		panic(err)
	}
	return encoded
}

func (e *Event) Decode(data []byte) error {
	reader := codec.NewReader(data)
	return e.DecodeFromReader(reader)
}

func (e *Event) MustDecode(data []byte) {
	if err := e.Decode(data); err != nil {
		panic(err)
	}
}

func (e *Event) DecodeStrict(data []byte) error {
	reader := codec.NewReader(data)
	if err := e.DecodeStrictFromReader(reader); err != nil {
		return err
	}
	if reader.HasUnreadBytes() {
		return codec.ErrUnreadBytes
	}
	return nil
}

func (e *Event) DecodeFromReader(reader *codec.Reader) error {
	{
		val, err := reader.ReadString(1, false)
		if err != nil {
			return err
		}
		e.Module = val
	}
	{
		val, err := reader.ReadString(2, false)
		if err != nil {
			return err
		}
		e.Name = val
	}
	{
		val, err := reader.ReadBytes(3, false)
		if err != nil {
			return err
		}
		e.Data = val
	}
	{
		val, err := reader.ReadBytesArray(4)
		if err != nil {
			return err
		}
		e.Topics = codec.BytesArrayToHexArray(val)
	}
	{
		val, err := reader.ReadUInt32(5, false)
		if err != nil {
			return err
		}
		e.Height = val
	}
	{
		val, err := reader.ReadUInt32(6, false)
		if err != nil {
			return err
		}
		e.Index = val
	}
	return nil
}

func (e *Event) DecodeStrictFromReader(reader *codec.Reader) error {
	{
		val, err := reader.ReadString(1, true)
		if err != nil {
			return err
		}
		e.Module = val
	}
	{
		val, err := reader.ReadString(2, true)
		if err != nil {
			return err
		}
		e.Name = val
	}
	{
		val, err := reader.ReadBytes(3, true)
		if err != nil {
			return err
		}
		e.Data = val
	}
	{
		val, err := reader.ReadBytesArray(4)
		if err != nil {
			return err
		}
		e.Topics = codec.BytesArrayToHexArray(val)
	}
	{
		val, err := reader.ReadUInt32(5, true)
		if err != nil {
			return err
		}
		e.Height = val
	}
	{
		val, err := reader.ReadUInt32(6, true)
		if err != nil {
			return err
		}
		e.Index = val
	}
	return nil
}
