// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// templates/api.tmpl
// templates/app.tmpl
// templates/command.tmpl
// templates/endpoint.tmpl
// templates/main.tmpl
// templates/module.tmpl
// templates/plugin.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesApiTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcc\xcf\x4a\xc4\x30\x10\xc7\xf1\x73\xe7\x29\x86\x3d\xb5\x82\x09\xe8\xd9\x43\xc1\x83\x81\x45\x2a\xf8\x02\xd9\x38\x1b\x87\x34\x7f\x48\x27\x2c\x52\xf3\xee\xe2\xc1\x1e\xbc\xfd\xf8\xf1\xe1\x5b\xac\x0b\xd6\x13\xee\x3b\xaa\x57\x1b\x09\xbf\xf1\x3d\x9f\xf3\x8d\x2a\xf6\x0e\xc0\xb1\xe4\x2a\x38\xc2\x70\xf2\x2c\x9f\xed\xa2\x5c\x8e\xfa\xcc\x5b\x78\x79\xd3\x2b\x6f\xe1\x9e\x92\xe7\x44\xba\x04\xaf\xaf\xd5\x46\xba\xe5\x1a\xf4\x65\x6d\x54\x2a\x27\x39\xc1\x04\x20\x5f\x85\x70\x5e\x0c\x6e\x52\x9b\x13\xdc\x61\x38\x80\x9a\x17\x03\x43\xcc\x1f\x6d\x25\xf3\x8c\x8d\x93\x3c\x3e\x40\x07\xb8\xb6\xe4\x70\xb4\x78\x37\x2f\x66\x42\x4e\x2c\xe3\x3f\x35\xfd\x86\xac\x3a\xde\x27\xfc\x9b\xd0\x7f\x02\x00\x00\xff\xff\xa5\x50\x37\x83\xd7\x00\x00\x00")

func templatesApiTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesApiTmpl,
		"templates/api.tmpl",
	)
}

func templatesApiTmpl() (*asset, error) {
	bytes, err := templatesApiTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/api.tmpl", size: 215, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesAppTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\x4d\x8f\xd3\x30\x10\x86\xcf\x99\x5f\x61\x72\x40\xf6\x6a\x71\xee\x8b\x7a\x58\xbe\x0a\x88\x6f\x89\x13\x42\xc8\x75\xa7\xe9\x90\xc4\xb6\x6c\x87\x6a\x55\xf5\xbf\x23\xdb\x69\x69\x85\x76\x69\xc5\xa5\xaa\xed\x79\x67\xde\xcc\x3c\xb6\x53\xba\x53\x2d\xb2\x41\x91\x01\xa0\xc1\x59\x1f\x19\x87\xaa\x46\xa3\xed\x92\x4c\xdb\xfc\x0c\xd6\xd4\x50\xd5\x64\x1b\xb2\x63\xa4\x3e\x2d\x6c\x48\xbf\x4e\xc5\x75\x0d\x50\xd5\x2d\xc5\xf5\xb8\x90\xda\x0e\xcd\x3b\x0a\xdd\xeb\xcf\x4d\x4f\xa1\x7b\x82\xa6\x25\x83\x8d\xeb\xda\x66\xd1\x5b\xdd\xe9\xb5\xa2\x9c\xeb\xdf\xf1\xba\x27\x34\xf1\xbc\xd8\x95\x57\x03\x6e\xac\xef\x1a\x6d\xcd\x8a\xda\x4b\x55\xce\x63\xc0\x58\x83\x00\x88\x77\x0e\x59\x88\xca\x47\xf4\x2c\x44\x3f\xea\xb8\xdd\x01\xac\x46\xa3\x19\x0f\xec\x6a\x3a\x12\x6c\x8e\xf1\xd6\xb9\x9e\xb4\x8a\x64\x0d\xd7\x76\x18\x94\x59\x3e\xcf\xf5\xd9\x55\xf1\x21\x8f\x22\xca\x89\x60\xbc\x7c\xd8\xf1\xd1\x35\x43\xef\xad\x17\x6c\x0b\x55\x11\xb2\x9b\x19\x7b\x7c\x5f\x8e\xed\x0e\xaa\xcd\x32\x8b\x52\x9c\x0d\x72\x8e\x71\xb3\xe4\x02\x2a\x5a\xe5\xdd\x47\x33\x66\xa8\x4f\xe9\x2a\x8f\x71\xf4\x26\x2d\xb3\x00\xaa\xdd\xbe\xc6\x2b\xea\xf1\x90\xa4\x0c\x56\x7e\x41\xb5\x4c\xfb\x3c\x0d\x56\xbe\xb5\x64\x78\xaa\x54\xcb\xa9\xb1\x32\xb3\x20\xce\xae\x34\x45\xdd\xcc\x58\x12\xca\xaf\x66\x50\x3e\xac\x55\xcf\x8f\x2d\x94\xff\xe2\xe9\x65\x09\x27\x43\x6f\x4c\x40\x1f\x5f\xe0\x4a\x8d\x7d\xe4\x67\x25\x81\xaa\x69\xd8\xc7\x5f\xe8\x37\x9e\x22\xb2\x69\x72\x8c\x8c\x1b\xe3\xbe\x39\xf2\x3d\xfa\x16\x4f\xa7\x2a\x00\xaa\x42\xca\xad\x73\xc9\x42\x59\xc8\x0f\xb8\xf9\xb4\xdf\x3e\xe2\xa1\x48\xf6\x06\x0e\xc2\x34\xcf\xeb\xe4\x07\xee\xc3\x6a\x8e\x06\x03\x85\x67\xe9\xc2\x5c\xc0\xd5\xb7\xef\x8b\xbb\x88\xc7\x2c\xfd\x17\x24\x6d\x71\x71\x19\x25\x93\xe8\x47\xbe\xec\x0f\xc1\xe2\x94\x21\xcd\xd1\x7b\x91\x8b\xe5\xf8\x0c\xfd\x9f\x67\x42\xe6\x06\x6c\x1f\xa2\xe8\xc4\x63\x56\xfe\x0d\xc0\x69\xa5\xc3\x3c\x8a\xc3\x97\xe9\x8d\x43\x2e\x60\x07\xbf\x03\x00\x00\xff\xff\xfb\xae\x58\x87\x08\x05\x00\x00")

func templatesAppTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAppTmpl,
		"templates/app.tmpl",
	)
}

func templatesAppTmpl() (*asset, error) {
	bytes, err := templatesAppTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/app.tmpl", size: 1288, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCommandTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xc1\x8a\xdb\x30\x10\x86\xcf\xd1\x53\x0c\x3e\xd9\x81\x5a\xd0\xde\x7a\x4d\x0a\x0d\xa4\xa5\x2d\xa1\x77\x45\x99\x28\xc2\xd6\xc8\x8c\x47\x24\x21\xab\x77\x5f\x9c\x84\xac\x59\xc8\xae\xcf\xf3\xcf\xa7\xef\xd7\x74\xc6\x36\xc6\x21\x5c\x2e\x50\xff\x8a\xbb\xd4\xe2\x6f\x13\x10\x5e\x60\x13\xd7\xf1\x88\x0c\x39\x2b\xe5\x43\x17\x59\xa0\x54\xb3\xc2\x79\x39\xa4\x6d\x6d\x63\xd0\x6b\xdf\x37\x3f\xff\xea\xd6\xf7\xcd\x17\x24\xe7\x09\x75\xd7\x38\xbd\x67\x13\xf0\x18\xb9\xd1\xdb\x36\x61\xc7\x9e\xa4\x98\xb4\xd8\x8b\x11\x0c\xc6\x1e\x3c\x61\xa1\x2a\xa5\xb4\x76\xf1\xbb\x43\x42\x36\x82\xe0\x22\x70\x22\xf8\x9c\x63\xe3\x0e\xad\x76\x48\x4a\xc9\xb9\x1b\xaa\xd5\x8f\x4e\x0b\x13\xb0\xcd\xf9\x8f\x61\x13\x7a\xe8\x85\x93\x15\xb8\xa8\xfc\x3c\xba\x88\x21\x18\xda\xbd\x65\x67\x8f\x5a\xf5\x7d\xa6\x66\xe1\xfa\x73\xab\x25\x24\x4f\xf2\xed\xeb\xc0\xdb\x27\xb2\x50\x5a\x98\x3f\x67\x56\xb0\x5a\x96\xd5\x7d\x67\x20\x33\x4a\x62\x1a\x2c\x56\xcb\x9c\x27\x53\x86\x41\x59\x0d\x86\x9e\xdc\x88\x53\x8c\x97\xae\xd7\xcc\xb9\x98\x4c\xfd\x8f\xec\xf7\xe7\xd2\xca\x09\xe6\xe3\xd3\xd4\x1b\x36\xd4\x1b\x2b\x3e\xd2\x2d\xb3\x88\x24\x78\x92\xc1\x60\x14\xbb\xcd\xfe\x61\x9f\x5a\x19\x49\x91\x6f\x27\x2b\xfc\x38\xa1\x4d\x82\x1f\x3b\xdc\x43\x0f\x09\x64\x8e\xfc\xfe\xc1\xd7\x00\x00\x00\xff\xff\x46\x03\x67\x23\xe7\x02\x00\x00")

func templatesCommandTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCommandTmpl,
		"templates/command.tmpl",
	)
}

func templatesCommandTmpl() (*asset, error) {
	bytes, err := templatesCommandTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/command.tmpl", size: 743, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesEndpointTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xce\xc1\x4a\xc4\x40\x0c\x06\xe0\xf3\xe6\x29\xc2\x9e\x5a\xc1\x16\xf4\xec\x4d\x71\x85\x45\x10\xbc\x89\x87\xd9\x69\xb6\x1b\xda\xc9\x0c\x99\x0c\x8b\xd4\xbe\xbb\xec\xa1\x55\x3c\x88\xb7\x90\xfc\xff\x47\x92\xf3\x83\xeb\x09\xa7\x09\x9b\x67\x17\x08\x3f\xf1\x35\xee\xe3\x99\x14\xe7\x19\x80\x43\x8a\x6a\x58\xc1\x66\xdb\xb3\x9d\xca\xa1\xf1\x31\xb4\x7b\xce\xc3\xee\xa5\x1d\x39\x0f\xd7\x24\x3d\x0b\xb5\x69\xe8\xdb\xa3\xba\x40\xe7\xa8\x43\x7b\x18\x0b\x25\x65\xb1\xed\xbf\x8a\x9a\xfc\x16\x6a\x00\xfb\x48\x84\x0f\xd2\xa5\xc8\x62\x98\x4d\x8b\x37\x9c\x60\xb3\x72\xcd\x72\x84\x4d\x88\x5d\x19\xe9\xe9\x1e\x0b\x8b\xdd\xde\xc0\x0c\x70\x2c\xe2\xb1\x22\xbc\x5a\x52\x35\xb2\xb0\x55\xbf\xa2\xf5\x85\xa4\x66\xdd\xde\xe1\x32\x7e\x23\xee\x27\xf2\x48\x56\xd5\x98\xcd\x19\x05\xe7\x4f\x2c\xb4\xfe\xb1\x73\xd2\x8d\xa4\xf9\x42\x2a\x59\x51\xc1\xe0\xd2\x5b\x36\x65\xe9\xdf\xff\xaa\x4c\x33\xcc\x5f\x01\x00\x00\xff\xff\xbc\x04\x7a\x77\x7d\x01\x00\x00")

func templatesEndpointTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEndpointTmpl,
		"templates/endpoint.tmpl",
	)
}

func templatesEndpointTmpl() (*asset, error) {
	bytes, err := templatesEndpointTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/endpoint.tmpl", size: 381, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\xcf\x4a\x03\x31\x10\xc6\xcf\x33\x4f\x31\xe6\x20\xbb\x52\xb3\xe0\xb1\xd0\x43\xa9\x58\xc5\x5e\xb4\x78\x12\x0f\x31\x4e\x63\xd8\x6c\x12\x92\x6c\x2f\xcb\xbe\xbb\xa4\x16\xa1\x27\x8f\xc9\xef\xfb\x33\x5f\x54\xba\x57\x86\x69\x50\xd6\x23\xda\x21\x86\x54\xa8\x41\x10\x2e\x18\x81\x20\x42\x16\x88\x20\x8c\x2d\xdf\xe3\xa7\xd4\x61\xe8\x76\x36\xf7\x8f\x2f\x9d\xb3\xb9\xbf\x65\x6f\xac\xe7\x2e\xf6\xa6\xd3\xce\xb2\x2f\xe2\x52\x3b\xa6\x83\x3a\x72\x65\xdd\xf1\x4e\x60\x8b\x78\x18\xbd\x3e\x95\x35\x2d\x4d\x08\x2a\x46\x5a\xae\x48\x3b\x2b\xd7\x31\x4e\x08\xf0\x96\x95\xe1\x25\x89\x5a\x43\xdb\xe0\x94\x37\xb4\xbf\x7f\xa6\xcd\xee\x89\x4a\x08\x4e\x2c\x10\x60\x13\x86\x41\xf9\xaf\xbc\xa4\xf7\x8f\x9b\x6a\x3e\x7f\xd4\x00\xf8\xbd\x44\x6e\xb9\xec\x8b\x4a\xe5\x8c\x9a\xeb\x5c\x5f\x9c\xa6\xb9\x5d\x5c\xca\xb6\xec\x39\xdb\xfc\xbf\x70\xad\x75\x18\xfd\x5f\xe2\x09\xcf\x0b\x84\x19\x81\x53\xaa\x43\x54\x8c\xf2\x75\xf4\x4d\xc8\x72\x9d\x4c\x6e\x11\xec\x81\x2a\xbb\x5a\x91\xb7\xae\x4e\x06\x17\x8c\x7c\x50\x45\xb9\x86\x53\x6a\xab\x7b\xc6\x9f\x00\x00\x00\xff\xff\xea\x48\x55\xe5\x87\x01\x00\x00")

func templatesMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesMainTmpl,
		"templates/main.tmpl",
	)
}

func templatesMainTmpl() (*asset, error) {
	bytes, err := templatesMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/main.tmpl", size: 391, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesModuleTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x93\xcb\x6e\xdb\x3c\x10\x85\xd7\xe2\x53\x10\x5e\x04\x92\x91\x5f\x06\xfe\xee\xb2\x53\x2e\x4d\x85\xa6\xae\xdb\x04\xdd\x14\x5d\xd0\xf4\x48\x19\x48\x1a\x0a\x24\x05\xdb\x55\xf5\xee\x85\x2e\x76\x24\x47\x41\xed\x34\xa8\x57\x06\xe7\xcc\x77\x78\x86\xa3\x5c\xc8\x44\xc4\xc0\xcb\x92\xfb\x73\x91\x01\xff\xc5\x1f\xd4\x9d\x5a\x83\xe6\x55\xc5\x18\x66\xb9\xd2\x96\xbb\xcc\x99\xc4\x68\x1f\x8b\xa5\x2f\x55\x36\xbb\x43\x93\x7c\xf8\x32\x4b\xd1\x24\xff\x01\xc5\x48\x30\xcb\x93\x78\x16\x69\x91\xc1\x5a\xe9\x64\xb6\x4c\x0b\xc8\x35\x92\x9d\x9c\xd8\x28\x15\x45\x18\x1f\xd7\x15\x03\x81\x16\x56\xe9\xe3\xe4\x3a\x97\xc7\x09\x8d\x15\x16\x32\x21\x1f\x91\x60\xc2\x3c\xc6\xec\x36\x07\xfe\x49\xad\x8a\x14\xb8\xb1\xba\x90\x96\x97\xcc\xd9\x67\xf4\xdb\x12\x73\x44\x8e\xbc\xf9\x4d\x83\x45\xc8\x1c\xa0\x55\xae\x90\x2c\x9f\xde\x74\xff\x58\xc5\x58\x54\x90\xe4\x73\x58\xb7\x4d\xae\xc7\xa7\x1d\xb9\x64\x8e\x06\x5b\x68\xe2\x67\xed\x49\xc9\x9c\x1a\x79\xd1\x32\xcf\x82\x45\x58\x56\xe7\xcc\xd9\x73\x2f\xf8\xd9\x0e\xdc\x14\xaa\x3d\xde\xcd\x76\x54\x8f\x87\xd7\xae\xc7\x0b\x24\xfb\xee\xff\x9e\x45\x59\xfa\xe1\x75\x35\xde\x51\xaf\x81\xeb\xd5\x49\x91\xe2\x5e\xcf\xa4\x2c\x0f\x56\xa4\xaa\x26\xa3\x84\x60\x11\xd6\xc1\x82\x45\xd8\x6b\xcf\x7c\x91\xe3\xa8\x7c\x97\xa2\x31\x7d\x9a\xbd\xbf\x3b\x1f\x40\xe0\x69\x96\xcf\xb3\x12\x5a\x57\x46\x31\xff\xfe\x63\xb9\xb5\xe0\x71\xd0\x5a\xe9\xba\xbd\x31\xf7\xb1\xae\x67\x7e\x3d\x12\xaf\x3e\xdb\xb1\x0e\x0a\x9d\x17\x61\x3a\x7a\xdd\x5b\xb0\x57\x2a\xcb\x04\xad\x5c\xaa\xc7\xd1\x0e\xca\xe3\xee\xe0\xf2\x9d\xe4\x9c\x2f\x95\x4a\xbd\x5e\x04\xc2\xf4\x9c\x47\x22\x35\x30\xfe\x5e\x84\xf6\x32\x55\x32\x71\xa5\xdd\xf0\xfd\x8e\xfb\xcd\xd9\x2d\xd0\x95\x22\x0b\x1b\xdb\xcb\xf6\x87\xeb\xde\x83\x48\xdf\x14\xf8\x0d\x34\x46\xdb\xc0\x18\xb0\xa6\x61\x0e\x72\x37\xd8\x56\xf2\x4a\xf2\x83\x16\x64\x84\xb4\xa8\xa8\xc1\x4f\x07\xfc\x5e\xf5\xc0\x65\x20\x6b\x6b\x5f\xc1\x14\x69\x7f\x7f\x06\x9a\x39\xac\xfb\xb2\xcf\x1f\x5d\xef\xc5\x27\xb9\x05\x02\x83\xe6\xbe\xee\x1f\xb9\x55\x57\x6e\xc2\x2f\xb4\x92\x60\x0c\x52\x7c\xf2\x00\xde\x23\x89\x14\x7f\xc2\xbf\x71\xbb\x84\x48\x69\xe8\x0d\xd4\xdc\x6c\x40\x16\x9d\xe5\xf3\x57\xed\xaa\x27\xfb\x04\x91\x05\x7d\xbc\x4d\x23\x7f\xad\x57\x9b\xa9\xfb\xf8\xfa\x3e\x2f\x6e\xd1\x5f\xa5\x7a\x73\xa3\xdf\x01\x00\x00\xff\xff\x55\x92\xb2\x17\x90\x07\x00\x00")

func templatesModuleTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesModuleTmpl,
		"templates/module.tmpl",
	)
}

func templatesModuleTmpl() (*asset, error) {
	bytes, err := templatesModuleTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/module.tmpl", size: 1936, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPluginTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x31\x4f\xc3\x30\x10\x85\xe7\xf8\x57\x1c\x19\xaa\xb8\x82\x64\x07\x75\x62\x01\xa9\xaa\x40\xc0\x0f\x70\x8d\xe3\x1e\x49\xce\xd6\xc5\x51\x85\x42\xfe\x3b\x32\x4e\x03\x43\x16\xd6\x77\xdf\x7b\x7e\x77\xf6\x4a\x37\xca\x1a\x18\xc7\xf2\xa0\x3a\x03\x5f\xf0\xea\xf6\xee\x6c\x78\x9a\x84\xc0\xce\x3b\x0e\x50\x88\x2c\x37\xa4\xdd\x3b\x92\xad\x3e\x7a\x47\xb9\x10\x59\x6e\x31\x9c\x86\x63\xa9\x5d\x57\xed\xb1\x6f\x1e\x9e\xab\x16\xfb\xe6\xc6\x90\x45\x32\x95\x6f\x6c\x55\xb3\xea\xcc\xd9\x71\x93\xff\x0f\xaf\x8e\xed\x60\x3c\x23\x85\x5c\x48\x21\xc2\xa7\x37\x70\xef\xa8\x46\x0b\x7d\xe0\x41\x07\x18\xc5\x34\xeb\x4f\xed\x60\x91\x7e\xf5\x6c\xf1\x96\x69\x14\xc9\x7a\x20\x0d\x07\x73\x4e\x4a\x21\x61\x3b\xdb\x46\x91\xb1\x09\x03\x13\x6c\x92\x32\x4e\x0b\x5f\xf8\x0b\x26\x21\x9e\xa6\x90\xf1\x15\x24\xfb\xc7\x95\xaf\x9c\x2d\x5f\x4d\x78\x24\x0c\x85\xae\x2d\x6c\x97\x35\xe7\x82\x69\x33\x09\x86\xd9\x71\xcc\xd6\x69\xd5\xdb\x1d\x6c\xd2\x6c\x9c\x44\x86\x75\x04\xa2\x18\x3f\xa0\x7c\xa3\x4e\x71\x7f\x52\x6d\xcc\x2c\x13\x76\x0d\xc9\x29\xef\x7e\xd0\xab\x1d\x10\xb6\x31\xf0\xd2\xd6\x30\x8b\x6c\x5a\xca\x13\xb6\xab\x55\x5f\x82\xe2\x50\xc8\x74\xe4\x95\xa9\xf3\xf3\xf0\x3b\x00\x00\xff\xff\xbf\xc4\x21\x1c\x3c\x02\x00\x00")

func templatesPluginTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesPluginTmpl,
		"templates/plugin.tmpl",
	)
}

func templatesPluginTmpl() (*asset, error) {
	bytes, err := templatesPluginTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/plugin.tmpl", size: 572, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("assetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("assetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/api.tmpl":      templatesApiTmpl,
	"templates/app.tmpl":      templatesAppTmpl,
	"templates/command.tmpl":  templatesCommandTmpl,
	"templates/endpoint.tmpl": templatesEndpointTmpl,
	"templates/main.tmpl":     templatesMainTmpl,
	"templates/module.tmpl":   templatesModuleTmpl,
	"templates/plugin.tmpl":   templatesPluginTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": {nil, map[string]*bintree{
		"api.tmpl":      {templatesApiTmpl, map[string]*bintree{}},
		"app.tmpl":      {templatesAppTmpl, map[string]*bintree{}},
		"command.tmpl":  {templatesCommandTmpl, map[string]*bintree{}},
		"endpoint.tmpl": {templatesEndpointTmpl, map[string]*bintree{}},
		"main.tmpl":     {templatesMainTmpl, map[string]*bintree{}},
		"module.tmpl":   {templatesModuleTmpl, map[string]*bintree{}},
		"plugin.tmpl":   {templatesPluginTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
