// Code generated by github.com/LiskHQ/lisk-engine/pkg/codec/gen; DO NOT EDIT.

package consensus

import (
	"github.com/LiskHQ/lisk-engine/pkg/codec"
	"github.com/LiskHQ/lisk-engine/pkg/consensus/certificate"
	"github.com/LiskHQ/lisk-engine/pkg/labi"
)

func (e *EventPostBlock) Encode() ([]byte, error) {
	writer := codec.NewWriter()
	if err := writer.WriteBytes(1, e.Block); err != nil {
		return nil, err
	}
	return writer.Result(), nil
}

func (e *EventPostBlock) MustEncode() []byte {
	encoded, err := e.Encode()
	if err != nil {
		panic(err)
	}
	return encoded
}

func (e *EventPostBlock) Decode(data []byte) error {
	reader := codec.NewReader(data)
	return e.DecodeFromReader(reader)
}

func (e *EventPostBlock) MustDecode(data []byte) {
	if err := e.Decode(data); err != nil {
		panic(err)
	}
}

func (e *EventPostBlock) DecodeStrict(data []byte) error {
	reader := codec.NewReader(data)
	if err := e.DecodeStrictFromReader(reader); err != nil {
		return err
	}
	if reader.HasUnreadBytes() {
		return codec.ErrUnreadBytes
	}
	return nil
}

func (e *EventPostBlock) DecodeFromReader(reader *codec.Reader) error {
	{
		val, err := reader.ReadBytes(1, false)
		if err != nil {
			return err
		}
		e.Block = val
	}
	return nil
}

func (e *EventPostBlock) DecodeStrictFromReader(reader *codec.Reader) error {
	{
		val, err := reader.ReadBytes(1, true)
		if err != nil {
			return err
		}
		e.Block = val
	}
	return nil
}

func (e *EventPostSingleCommits) Encode() ([]byte, error) {
	writer := codec.NewWriter()
	{
		for _, val := range e.SingleCommits {
			if val != nil {
				if err := writer.WriteEncodable(1, val); err != nil {
					return nil, err
				}
			}
		}
	}
	return writer.Result(), nil
}

func (e *EventPostSingleCommits) MustEncode() []byte {
	encoded, err := e.Encode()
	if err != nil {
		panic(err)
	}
	return encoded
}

func (e *EventPostSingleCommits) Decode(data []byte) error {
	reader := codec.NewReader(data)
	return e.DecodeFromReader(reader)
}

func (e *EventPostSingleCommits) MustDecode(data []byte) {
	if err := e.Decode(data); err != nil {
		panic(err)
	}
}

func (e *EventPostSingleCommits) DecodeStrict(data []byte) error {
	reader := codec.NewReader(data)
	if err := e.DecodeStrictFromReader(reader); err != nil {
		return err
	}
	if reader.HasUnreadBytes() {
		return codec.ErrUnreadBytes
	}
	return nil
}

func (e *EventPostSingleCommits) DecodeFromReader(reader *codec.Reader) error {
	{
		vals, err := reader.ReadDecodables(1, func() codec.DecodableReader { return new(certificate.SingleCommit) })
		if err != nil {
			return err
		}
		r := make([]*certificate.SingleCommit, len(vals))
		for i, v := range vals {
			r[i] = v.(*certificate.SingleCommit)
		}
		e.SingleCommits = r
	}
	return nil
}

func (e *EventPostSingleCommits) DecodeStrictFromReader(reader *codec.Reader) error {
	{
		vals, err := reader.ReadDecodables(1, func() codec.DecodableReader { return new(certificate.SingleCommit) })
		if err != nil {
			return err
		}
		r := make([]*certificate.SingleCommit, len(vals))
		for i, v := range vals {
			r[i] = v.(*certificate.SingleCommit)
		}
		e.SingleCommits = r
	}
	return nil
}

func (e *ValidatorsHash) Encode() ([]byte, error) {
	writer := codec.NewWriter()
	if err := writer.WriteBytesArray(1, e.Keys); err != nil {
		return nil, err
	}
	if err := writer.WriteUInts(2, e.Weights); err != nil {
		return nil, err
	}
	if err := writer.WriteUInt(3, e.CertificateThreshold); err != nil {
		return nil, err
	}
	return writer.Result(), nil
}

func (e *ValidatorsHash) MustEncode() []byte {
	encoded, err := e.Encode()
	if err != nil {
		panic(err)
	}
	return encoded
}

func (e *ValidatorsHash) Decode(data []byte) error {
	reader := codec.NewReader(data)
	return e.DecodeFromReader(reader)
}

func (e *ValidatorsHash) MustDecode(data []byte) {
	if err := e.Decode(data); err != nil {
		panic(err)
	}
}

func (e *ValidatorsHash) DecodeStrict(data []byte) error {
	reader := codec.NewReader(data)
	if err := e.DecodeStrictFromReader(reader); err != nil {
		return err
	}
	if reader.HasUnreadBytes() {
		return codec.ErrUnreadBytes
	}
	return nil
}

func (e *ValidatorsHash) DecodeFromReader(reader *codec.Reader) error {
	{
		val, err := reader.ReadBytesArray(1)
		if err != nil {
			return err
		}
		e.Keys = val
	}
	{
		val, err := reader.ReadUInts(2)
		if err != nil {
			return err
		}
		e.Weights = val
	}
	{
		val, err := reader.ReadUInt(3, false)
		if err != nil {
			return err
		}
		e.CertificateThreshold = val
	}
	return nil
}

func (e *ValidatorsHash) DecodeStrictFromReader(reader *codec.Reader) error {
	{
		val, err := reader.ReadBytesArray(1)
		if err != nil {
			return err
		}
		e.Keys = val
	}
	{
		val, err := reader.ReadUInts(2)
		if err != nil {
			return err
		}
		e.Weights = val
	}
	{
		val, err := reader.ReadUInt(3, true)
		if err != nil {
			return err
		}
		e.CertificateThreshold = val
	}
	return nil
}

func (e *NextValidatorParams) Encode() ([]byte, error) {
	writer := codec.NewWriter()
	{
		for _, val := range e.NextValidators {
			if val != nil {
				if err := writer.WriteEncodable(1, val); err != nil {
					return nil, err
				}
			}
		}
	}
	if err := writer.WriteUInt(2, e.PrecommitThreshold); err != nil {
		return nil, err
	}
	if err := writer.WriteUInt(3, e.CertificateThreshold); err != nil {
		return nil, err
	}
	return writer.Result(), nil
}

func (e *NextValidatorParams) MustEncode() []byte {
	encoded, err := e.Encode()
	if err != nil {
		panic(err)
	}
	return encoded
}

func (e *NextValidatorParams) Decode(data []byte) error {
	reader := codec.NewReader(data)
	return e.DecodeFromReader(reader)
}

func (e *NextValidatorParams) MustDecode(data []byte) {
	if err := e.Decode(data); err != nil {
		panic(err)
	}
}

func (e *NextValidatorParams) DecodeStrict(data []byte) error {
	reader := codec.NewReader(data)
	if err := e.DecodeStrictFromReader(reader); err != nil {
		return err
	}
	if reader.HasUnreadBytes() {
		return codec.ErrUnreadBytes
	}
	return nil
}

func (e *NextValidatorParams) DecodeFromReader(reader *codec.Reader) error {
	{
		vals, err := reader.ReadDecodables(1, func() codec.DecodableReader { return new(labi.Validator) })
		if err != nil {
			return err
		}
		r := make([]*labi.Validator, len(vals))
		for i, v := range vals {
			r[i] = v.(*labi.Validator)
		}
		e.NextValidators = r
	}
	{
		val, err := reader.ReadUInt(2, false)
		if err != nil {
			return err
		}
		e.PrecommitThreshold = val
	}
	{
		val, err := reader.ReadUInt(3, false)
		if err != nil {
			return err
		}
		e.CertificateThreshold = val
	}
	return nil
}

func (e *NextValidatorParams) DecodeStrictFromReader(reader *codec.Reader) error {
	{
		vals, err := reader.ReadDecodables(1, func() codec.DecodableReader { return new(labi.Validator) })
		if err != nil {
			return err
		}
		r := make([]*labi.Validator, len(vals))
		for i, v := range vals {
			r[i] = v.(*labi.Validator)
		}
		e.NextValidators = r
	}
	{
		val, err := reader.ReadUInt(2, true)
		if err != nil {
			return err
		}
		e.PrecommitThreshold = val
	}
	{
		val, err := reader.ReadUInt(3, true)
		if err != nil {
			return err
		}
		e.CertificateThreshold = val
	}
	return nil
}
