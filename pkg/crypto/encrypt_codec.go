// Code generated by github.com/LiskHQ/lisk-engine/pkg/codec/gen; DO NOT EDIT.

package crypto

import (
	"github.com/LiskHQ/lisk-engine/pkg/codec"
)

func (e *KDFParams) Encode() []byte {
	writer := codec.NewWriter()
	writer.WriteUInt32(1, e.Parallelism)
	writer.WriteUInt32(2, e.Iterations)
	writer.WriteUInt32(3, e.MemorySize)
	writer.WriteBytes(4, e.Salt)
	return writer.Result()
}

func (e *KDFParams) Decode(data []byte) error {
	reader := codec.NewReader(data)
	return e.DecodeFromReader(reader)
}

func (e *KDFParams) MustDecode(data []byte) {
	if err := e.Decode(data); err != nil {
		panic(err)
	}
}

func (e *KDFParams) DecodeStrict(data []byte) error {
	reader := codec.NewReader(data)
	if err := e.DecodeStrictFromReader(reader); err != nil {
		return err
	}
	if reader.HasUnreadBytes() {
		return codec.ErrUnreadBytes
	}
	return nil
}

func (e *KDFParams) DecodeFromReader(reader *codec.Reader) error {
	{
		val, err := reader.ReadUInt32(1, false)
		if err != nil {
			return err
		}
		e.Parallelism = val
	}
	{
		val, err := reader.ReadUInt32(2, false)
		if err != nil {
			return err
		}
		e.Iterations = val
	}
	{
		val, err := reader.ReadUInt32(3, false)
		if err != nil {
			return err
		}
		e.MemorySize = val
	}
	{
		val, err := reader.ReadBytes(4, false)
		if err != nil {
			return err
		}
		e.Salt = val
	}
	return nil
}

func (e *KDFParams) DecodeStrictFromReader(reader *codec.Reader) error {
	{
		val, err := reader.ReadUInt32(1, true)
		if err != nil {
			return err
		}
		e.Parallelism = val
	}
	{
		val, err := reader.ReadUInt32(2, true)
		if err != nil {
			return err
		}
		e.Iterations = val
	}
	{
		val, err := reader.ReadUInt32(3, true)
		if err != nil {
			return err
		}
		e.MemorySize = val
	}
	{
		val, err := reader.ReadBytes(4, true)
		if err != nil {
			return err
		}
		e.Salt = val
	}
	return nil
}

func (e *CipherParams) Encode() []byte {
	writer := codec.NewWriter()
	writer.WriteBytes(1, e.IV)
	writer.WriteBytes(2, e.Tag)
	return writer.Result()
}

func (e *CipherParams) Decode(data []byte) error {
	reader := codec.NewReader(data)
	return e.DecodeFromReader(reader)
}

func (e *CipherParams) MustDecode(data []byte) {
	if err := e.Decode(data); err != nil {
		panic(err)
	}
}

func (e *CipherParams) DecodeStrict(data []byte) error {
	reader := codec.NewReader(data)
	if err := e.DecodeStrictFromReader(reader); err != nil {
		return err
	}
	if reader.HasUnreadBytes() {
		return codec.ErrUnreadBytes
	}
	return nil
}

func (e *CipherParams) DecodeFromReader(reader *codec.Reader) error {
	{
		val, err := reader.ReadBytes(1, false)
		if err != nil {
			return err
		}
		e.IV = val
	}
	{
		val, err := reader.ReadBytes(2, false)
		if err != nil {
			return err
		}
		e.Tag = val
	}
	return nil
}

func (e *CipherParams) DecodeStrictFromReader(reader *codec.Reader) error {
	{
		val, err := reader.ReadBytes(1, true)
		if err != nil {
			return err
		}
		e.IV = val
	}
	{
		val, err := reader.ReadBytes(2, true)
		if err != nil {
			return err
		}
		e.Tag = val
	}
	return nil
}

func (e *EncryptedMessage) Encode() []byte {
	writer := codec.NewWriter()
	writer.WriteString(1, e.Version)
	writer.WriteBytes(2, e.CipherText)
	writer.WriteBytes(3, e.Mac)
	writer.WriteString(4, e.KDF)
	if e.KDFParams != nil {
		writer.WriteEncodable(5, e.KDFParams)
	}
	writer.WriteString(6, e.Cipher)
	if e.CipherParams != nil {
		writer.WriteEncodable(7, e.CipherParams)
	}
	return writer.Result()
}

func (e *EncryptedMessage) Decode(data []byte) error {
	reader := codec.NewReader(data)
	return e.DecodeFromReader(reader)
}

func (e *EncryptedMessage) MustDecode(data []byte) {
	if err := e.Decode(data); err != nil {
		panic(err)
	}
}

func (e *EncryptedMessage) DecodeStrict(data []byte) error {
	reader := codec.NewReader(data)
	if err := e.DecodeStrictFromReader(reader); err != nil {
		return err
	}
	if reader.HasUnreadBytes() {
		return codec.ErrUnreadBytes
	}
	return nil
}

func (e *EncryptedMessage) DecodeFromReader(reader *codec.Reader) error {
	{
		val, err := reader.ReadString(1, false)
		if err != nil {
			return err
		}
		e.Version = val
	}
	{
		val, err := reader.ReadBytes(2, false)
		if err != nil {
			return err
		}
		e.CipherText = val
	}
	{
		val, err := reader.ReadBytes(3, false)
		if err != nil {
			return err
		}
		e.Mac = val
	}
	{
		val, err := reader.ReadString(4, false)
		if err != nil {
			return err
		}
		e.KDF = val
	}
	{
		val, err := reader.ReadDecodable(5, func() codec.DecodableReader { return new(KDFParams) }, false)
		if err != nil {
			return err
		}
		e.KDFParams = val.(*KDFParams)
	}
	{
		val, err := reader.ReadString(6, false)
		if err != nil {
			return err
		}
		e.Cipher = val
	}
	{
		val, err := reader.ReadDecodable(7, func() codec.DecodableReader { return new(CipherParams) }, false)
		if err != nil {
			return err
		}
		e.CipherParams = val.(*CipherParams)
	}
	return nil
}

func (e *EncryptedMessage) DecodeStrictFromReader(reader *codec.Reader) error {
	{
		val, err := reader.ReadString(1, true)
		if err != nil {
			return err
		}
		e.Version = val
	}
	{
		val, err := reader.ReadBytes(2, true)
		if err != nil {
			return err
		}
		e.CipherText = val
	}
	{
		val, err := reader.ReadBytes(3, true)
		if err != nil {
			return err
		}
		e.Mac = val
	}
	{
		val, err := reader.ReadString(4, true)
		if err != nil {
			return err
		}
		e.KDF = val
	}
	{
		val, err := reader.ReadDecodable(5, func() codec.DecodableReader { return new(KDFParams) }, true)
		if err != nil {
			return err
		}
		e.KDFParams = val.(*KDFParams)
	}
	{
		val, err := reader.ReadString(6, true)
		if err != nil {
			return err
		}
		e.Cipher = val
	}
	{
		val, err := reader.ReadDecodable(7, func() codec.DecodableReader { return new(CipherParams) }, true)
		if err != nil {
			return err
		}
		e.CipherParams = val.(*CipherParams)
	}
	return nil
}
