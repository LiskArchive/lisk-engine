// Code generated by github.com/LiskHQ/lisk-engine/pkg/codec/gen; DO NOT EDIT.

package p2p

import (
	"github.com/LiskHQ/lisk-engine/pkg/codec"
)

func (e *Request) Encode() []byte {
	writer := codec.NewWriter()
	writer.WriteString(1, e.ID)
	writer.WriteString(2, e.Procedure)
	writer.WriteBytes(3, e.Data)
	return writer.Result()
}

func (e *Request) Decode(data []byte) error {
	reader := codec.NewReader(data)
	return e.DecodeFromReader(reader)
}

func (e *Request) MustDecode(data []byte) {
	if err := e.Decode(data); err != nil {
		panic(err)
	}
}

func (e *Request) DecodeStrict(data []byte) error {
	reader := codec.NewReader(data)
	if err := e.DecodeStrictFromReader(reader); err != nil {
		return err
	}
	if reader.HasUnreadBytes() {
		return codec.ErrUnreadBytes
	}
	return nil
}

func (e *Request) DecodeFromReader(reader *codec.Reader) error {
	{
		val, err := reader.ReadString(1, false)
		if err != nil {
			return err
		}
		e.ID = val
	}
	{
		val, err := reader.ReadString(2, false)
		if err != nil {
			return err
		}
		e.Procedure = val
	}
	{
		val, err := reader.ReadBytes(3, false)
		if err != nil {
			return err
		}
		e.Data = val
	}
	return nil
}

func (e *Request) DecodeStrictFromReader(reader *codec.Reader) error {
	{
		val, err := reader.ReadString(1, true)
		if err != nil {
			return err
		}
		e.ID = val
	}
	{
		val, err := reader.ReadString(2, true)
		if err != nil {
			return err
		}
		e.Procedure = val
	}
	{
		val, err := reader.ReadBytes(3, true)
		if err != nil {
			return err
		}
		e.Data = val
	}
	return nil
}

func (e *responseMsg) Encode() []byte {
	writer := codec.NewWriter()
	writer.WriteString(1, e.ID)
	writer.WriteString(2, e.Procedure)
	writer.WriteBytes(3, e.Data)
	writer.WriteString(4, e.Error)
	return writer.Result()
}

func (e *responseMsg) Decode(data []byte) error {
	reader := codec.NewReader(data)
	return e.DecodeFromReader(reader)
}

func (e *responseMsg) MustDecode(data []byte) {
	if err := e.Decode(data); err != nil {
		panic(err)
	}
}

func (e *responseMsg) DecodeStrict(data []byte) error {
	reader := codec.NewReader(data)
	if err := e.DecodeStrictFromReader(reader); err != nil {
		return err
	}
	if reader.HasUnreadBytes() {
		return codec.ErrUnreadBytes
	}
	return nil
}

func (e *responseMsg) DecodeFromReader(reader *codec.Reader) error {
	{
		val, err := reader.ReadString(1, false)
		if err != nil {
			return err
		}
		e.ID = val
	}
	{
		val, err := reader.ReadString(2, false)
		if err != nil {
			return err
		}
		e.Procedure = val
	}
	{
		val, err := reader.ReadBytes(3, false)
		if err != nil {
			return err
		}
		e.Data = val
	}
	{
		val, err := reader.ReadString(4, false)
		if err != nil {
			return err
		}
		e.Error = val
	}
	return nil
}

func (e *responseMsg) DecodeStrictFromReader(reader *codec.Reader) error {
	{
		val, err := reader.ReadString(1, true)
		if err != nil {
			return err
		}
		e.ID = val
	}
	{
		val, err := reader.ReadString(2, true)
		if err != nil {
			return err
		}
		e.Procedure = val
	}
	{
		val, err := reader.ReadBytes(3, true)
		if err != nil {
			return err
		}
		e.Data = val
	}
	{
		val, err := reader.ReadString(4, true)
		if err != nil {
			return err
		}
		e.Error = val
	}
	return nil
}

func (e *Message) Encode() []byte {
	writer := codec.NewWriter()
	writer.WriteBytes(1, e.Data)
	return writer.Result()
}

func (e *Message) Decode(data []byte) error {
	reader := codec.NewReader(data)
	return e.DecodeFromReader(reader)
}

func (e *Message) MustDecode(data []byte) {
	if err := e.Decode(data); err != nil {
		panic(err)
	}
}

func (e *Message) DecodeStrict(data []byte) error {
	reader := codec.NewReader(data)
	if err := e.DecodeStrictFromReader(reader); err != nil {
		return err
	}
	if reader.HasUnreadBytes() {
		return codec.ErrUnreadBytes
	}
	return nil
}

func (e *Message) DecodeFromReader(reader *codec.Reader) error {
	{
		val, err := reader.ReadBytes(1, false)
		if err != nil {
			return err
		}
		e.Data = val
	}
	return nil
}

func (e *Message) DecodeStrictFromReader(reader *codec.Reader) error {
	{
		val, err := reader.ReadBytes(1, true)
		if err != nil {
			return err
		}
		e.Data = val
	}
	return nil
}
